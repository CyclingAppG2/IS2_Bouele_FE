{"version":3,"file":"ngx-auth.umd.min.js","sources":["~/ngx-auth/src/rxjs.util.ts","~/ngx-auth/src/auth.service.ts","~/ngx-auth/src/tokens.ts","~/ngx-auth/src/public.guard.ts","~/ngx-auth/src/protected.guard.ts","~/ngx-auth/src/auth.interceptor.ts","~/ngx-auth/src/auth.module.ts"],"sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { first as _first } from 'rxjs/operator/first';\nimport { switchMap as _switchMap } from 'rxjs/operator/switchMap';\nimport { map as _map } from 'rxjs/operator/map';\nimport { _catch as __catch } from 'rxjs/operator/catch';\n\nexport function first<T>(obs: Observable<T>): Observable<T> {\n  return _first.call(obs);\n}\n\nexport function switchMap<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => Observable<R>\n): Observable<R> {\n  return _switchMap.call(obs, project);\n}\n\nexport function map<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => R\n): Observable<R> {\n  return _map.call(obs, project);\n}\n\nexport function _catch<T, R>(\n  obs: Observable<T>,\n  selector: (err: any, caught: Observable<T>) => Observable<R>\n): Observable<T | R> {\n  return __catch.call(obs, selector);\n}\n\nexport { _throw } from 'rxjs/observable/throw';\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Essential service for authentication\n * @export\n * @interface AuthService\n */\nexport abstract class AuthService {\n\n  /**\n   * Check, if user already authorized.\n   *\n   * Should return Observable with true or false values\n   *\n   * @public\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract isAuthorized(): Observable<boolean>;\n\n  /**\n   * Get access token\n   *\n   * Should return access token in Observable from e.g.\n   * localStorage\n   *\n   * @public\n   *\n   * @returns {Observable<string>}\n   */\n  public abstract getAccessToken(): Observable<string>;\n\n  /**\n   * Function, that should perform refresh token verifyTokenRequest\n   *\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   *\n   * @public\n   *\n   * @returns {Observable<*>}\n   */\n  public abstract refreshToken(): Observable<any>;\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   *\n   * @public\n   *\n   * @param {HttpErrorResponse} response\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract refreshShouldHappen(response: HttpErrorResponse): boolean;\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   *\n   * @public\n   *\n   * @param {string} url\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract verifyTokenRequest(url: string): boolean;\n\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   *\n   * To change behavior, override this method.\n   *\n   * @public\n   *\n   * @param {string} token\n   *\n   * @returns {[name: string]: string | string[]}\n   */\n  public abstract getHeaders?(token: string) : { [name: string]: string | string[] };\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');\nexport const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');\nexport const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');\n","import { Injectable, Inject } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }\n *\n * @export\n *\n * @class PublicGuard\n *\n * @implements {CanActivate}\n * @implements {CanActivateChild}\n */\n@Injectable()\nexport class PublicGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PROTECTED_FALLBACK_PAGE_URI) private protectedFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   *\n   * @param {ActivatedRouteSnapshot} _route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService.isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (isAuthorized && !this.isProtectedPage(state)) {\n          this.navigate(this.protectedFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   *\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is protected fallback page\n   *\n   * @private\n   *\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {boolean}\n   */\n  private isProtectedPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.protectedFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   *\n   * @private\n   * @param {string} url\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }\n *\n * @export\n *\n * @class ProtectedGuard\n *\n * @implements {CanActivate}\n * @implements {CanActivateChild}\n */\n@Injectable()\nexport class ProtectedGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE)private authService: AuthService,\n    @Inject(PUBLIC_FALLBACK_PAGE_URI) private publicFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   *\n   * @param {ActivatedRouteSnapshot} _route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService .isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (!isAuthorized && !this.isPublicPage(state)) {\n          this.navigate(this.publicFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   *\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is public fallback page\n   *\n   * @private\n   *\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {boolean}\n   */\n  private isPublicPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.publicFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   *\n   * @private\n   * @param {string} url\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  map,\n  first,\n  switchMap,\n  _throw,\n  _catch\n} from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './tokens';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  /**\n   * Is refresh token is being executed\n   *\n   * @private\n   *\n   * @type {boolean}\n   */\n  private refreshInProgress = false;\n\n  /**\n   * Notify all outstanding requests through this subject\n   *\n   * @private\n   *\n   * @type {Subject<boolean>}\n   */\n  private refreshSubject: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private injector: Injector) {}\n\n  /**\n   * Intercept an outgoing `HttpRequest`\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpHandler} delegate\n   *\n   * @returns {Observable<HttpEvent<*>>}\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    if (authService.verifyTokenRequest(req.url)) {\n      return delegate.handle(req);\n    }\n\n    return this.processIntercept(req, delegate);\n  }\n\n  /**\n   * Process all the requests via custom interceptors.\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} original\n   * @param {HttpHandler} delegate\n   *\n   * @returns {Observable<HttpEvent<*>>}\n   */\n  private processIntercept(\n    original: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const clone: HttpRequest<any> = original.clone();\n\n    return _catch(\n      switchMap(\n        this.request(clone),\n        (req: HttpRequest<any>) => delegate.handle(req)\n      ),\n      (res: HttpErrorResponse) => this.responseError(clone, res)\n    );\n  }\n\n  /**\n   * Request interceptor. Delays request if refresh is in progress\n   * otherwise adds token to the headers\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   *\n   * @returns {Observable}\n   */\n  private request(req: HttpRequest<any>): Observable<HttpRequest<any>|HttpEvent<any>> {\n    if (this.refreshInProgress) {\n      return this.delayRequest(req);\n    }\n\n    return this.addToken(req);\n  }\n\n  /**\n   * Failed request interceptor, check if it has to be processed with refresh\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpErrorResponse} res\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private responseError(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n    const refreshShouldHappen: boolean =\n      authService.refreshShouldHappen(res);\n\n    if (refreshShouldHappen && !this.refreshInProgress) {\n      this.refreshInProgress = true;\n\n      authService\n        .refreshToken()\n        .subscribe(\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(true);\n          },\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(false)\n          }\n        );\n    }\n\n    if (refreshShouldHappen && this.refreshInProgress) {\n      return this.delayRequest(req, res);\n    }\n\n    return _throw(res);\n  }\n\n  /**\n   * Add access token to headers or the request\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private addToken(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    return first(map(\n      authService.getAccessToken(),\n      (token: string) => {\n        if (token) {\n          let headers : { [name: string]: string | string[] };\n          if(typeof authService.getHeaders === 'function') {\n            headers = authService.getHeaders(token);\n          } else {\n            headers = { Authorization: `Bearer ${token}` };\n          }\n\n          return req.clone({\n            setHeaders: headers\n          });\n        }\n\n        return req;\n      }\n    ));\n  }\n\n  /**\n   * Delay request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpErrorResponse} [res]\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private delayRequest(\n    req: HttpRequest<any>,\n    res?: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const http: HttpClient =\n      this.injector.get<HttpClient>(HttpClient);\n\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => {\n        if (status) {\n          return http.request(req)\n        }\n\n        return _throw(res || req)\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { PublicGuard } from './public.guard';\nimport { ProtectedGuard } from './protected.guard';\nimport { AuthInterceptor } from './auth.interceptor';\n\n@NgModule({\n  providers: [\n    PublicGuard,\n    ProtectedGuard,\n    AuthInterceptor,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    }\n  ]\n})\nexport class AuthModule {\n}\n"],"names":["first$2","obs","_first","call","switchMap$2","project","_switchMap","map$2","_map","AuthService","AUTH_SERVICE","InjectionToken","PUBLIC_FALLBACK_PAGE_URI","PROTECTED_FALLBACK_PAGE_URI","exports","PublicGuard","authService","protectedFallbackPageUri","router","this","prototype","canActivate","_route","state","_this","map","isAuthorized","isProtectedPage","navigate","canActivateChild","route","url","startsWith","window","location","href","navigateByUrl","__decorate","Injectable","__param","Inject","__metadata","String","Router","ProtectedGuard","publicFallbackPageUri","isPublicPage","ɵa","AuthInterceptor","injector","refreshInProgress","refreshSubject","Subject","intercept","req","delegate","get","verifyTokenRequest","handle","processIntercept","original","clone","selector","__catch","_catch","switchMap","request","res","responseError","delayRequest","addToken","refreshShouldHappen","refreshToken","subscribe","next","_throw","first","getAccessToken","token","headers","getHeaders","Authorization","setHeaders","http","HttpClient","status","Injector","AuthModule","NgModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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"}
