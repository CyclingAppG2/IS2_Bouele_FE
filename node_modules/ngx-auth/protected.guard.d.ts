import { Router, CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { AuthService } from './auth.service';
/**
 * Guard, checks access token availability and allows or disallows access to page,
 * and redirects out
 *
 * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }
 *
 * @export
 *
 * @class ProtectedGuard
 *
 * @implements {CanActivate}
 * @implements {CanActivateChild}
 */
export declare class ProtectedGuard implements CanActivate, CanActivateChild {
    private authService;
    private publicFallbackPageUri;
    private router;
    constructor(authService: AuthService, publicFallbackPageUri: string, router: Router);
    /**
     * CanActivate handler
     *
     * @param {ActivatedRouteSnapshot} _route
     * @param {RouterStateSnapshot} state
     *
     * @returns {Observable<boolean>}
     */
    canActivate(_route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>;
    /**
     * CanActivateChild handler
     *
     * @param {ActivatedRouteSnapshot} route
     * @param {RouterStateSnapshot} state
     *
     * @returns {Observable<boolean>}
     */
    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean>;
    /**
     * Check, if current page is public fallback page
     *
     * @private
     *
     * @param {RouterStateSnapshot} state
     *
     * @returns {boolean}
     */
    private isPublicPage(state);
    /**
     * Navigate away from the app / path
     *
     * @private
     * @param {string} url
     */
    private navigate(url);
}
