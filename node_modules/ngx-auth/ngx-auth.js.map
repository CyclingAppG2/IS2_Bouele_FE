{"version":3,"file":"ngx-auth.js","sources":["ts/src/ngx-auth.ts","ts/src/auth.module.ts","ts/src/auth.interceptor.ts","ts/src/protected.guard.ts","ts/src/public.guard.ts","ts/src/tokens.ts","ts/src/rxjs.util.ts","ts/src/auth.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AuthInterceptor as Éµa} from './auth.interceptor';","import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { PublicGuard } from './public.guard';\nimport { ProtectedGuard } from './protected.guard';\nimport { AuthInterceptor } from './auth.interceptor';\n\n@NgModule({\n  providers: [\n    PublicGuard,\n    ProtectedGuard,\n    AuthInterceptor,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptor,\n      multi: true,\n    }\n  ]\n})\nexport class AuthModule {\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpClient,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport {\n  map,\n  first,\n  switchMap,\n  _throw,\n  _catch\n} from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE } from './tokens';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  /**\n   * Is refresh token is being executed\n   *\n   * @private\n   *\n   * @type {boolean}\n   */\n  private refreshInProgress = false;\n\n  /**\n   * Notify all outstanding requests through this subject\n   *\n   * @private\n   *\n   * @type {Subject<boolean>}\n   */\n  private refreshSubject: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private injector: Injector) {}\n\n  /**\n   * Intercept an outgoing `HttpRequest`\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpHandler} delegate\n   *\n   * @returns {Observable<HttpEvent<*>>}\n   */\n  public intercept(\n    req: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    if (authService.verifyTokenRequest(req.url)) {\n      return delegate.handle(req);\n    }\n\n    return this.processIntercept(req, delegate);\n  }\n\n  /**\n   * Process all the requests via custom interceptors.\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} original\n   * @param {HttpHandler} delegate\n   *\n   * @returns {Observable<HttpEvent<*>>}\n   */\n  private processIntercept(\n    original: HttpRequest<any>,\n    delegate: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const clone: HttpRequest<any> = original.clone();\n\n    return _catch(\n      switchMap(\n        this.request(clone),\n        (req: HttpRequest<any>) => delegate.handle(req)\n      ),\n      (res: HttpErrorResponse) => this.responseError(clone, res)\n    );\n  }\n\n  /**\n   * Request interceptor. Delays request if refresh is in progress\n   * otherwise adds token to the headers\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   *\n   * @returns {Observable}\n   */\n  private request(req: HttpRequest<any>): Observable<HttpRequest<any>|HttpEvent<any>> {\n    if (this.refreshInProgress) {\n      return this.delayRequest(req);\n    }\n\n    return this.addToken(req);\n  }\n\n  /**\n   * Failed request interceptor, check if it has to be processed with refresh\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpErrorResponse} res\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private responseError(\n    req: HttpRequest<any>,\n    res: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n    const refreshShouldHappen: boolean =\n      authService.refreshShouldHappen(res);\n\n    if (refreshShouldHappen && !this.refreshInProgress) {\n      this.refreshInProgress = true;\n\n      authService\n        .refreshToken()\n        .subscribe(\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(true);\n          },\n          () => {\n            this.refreshInProgress = false;\n            this.refreshSubject.next(false)\n          }\n        );\n    }\n\n    if (refreshShouldHappen && this.refreshInProgress) {\n      return this.delayRequest(req, res);\n    }\n\n    return _throw(res);\n  }\n\n  /**\n   * Add access token to headers or the request\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private addToken(req: HttpRequest<any>): Observable<HttpRequest<any>> {\n    const authService: AuthService =\n      this.injector.get<AuthService>(AUTH_SERVICE);\n\n    return first(map(\n      authService.getAccessToken(),\n      (token: string) => {\n        if (token) {\n          let headers : { [name: string]: string | string[] };\n          if(typeof authService.getHeaders === 'function') {\n            headers = authService.getHeaders(token);\n          } else {\n            headers = { Authorization: `Bearer ${token}` };\n          }\n\n          return req.clone({\n            setHeaders: headers\n          });\n        }\n\n        return req;\n      }\n    ));\n  }\n\n  /**\n   * Delay request, by subscribing on refresh event, once it finished, process it\n   * otherwise throw error\n   *\n   * @private\n   *\n   * @param {HttpRequest<*>} req\n   * @param {HttpErrorResponse} [res]\n   *\n   * @returns {Observable<HttpRequest<*>>}\n   */\n  private delayRequest(\n    req: HttpRequest<any>,\n    res?: HttpErrorResponse\n  ): Observable<HttpEvent<any>> {\n    const http: HttpClient =\n      this.injector.get<HttpClient>(HttpClient);\n\n    return switchMap(\n      first(this.refreshSubject),\n      (status: boolean) => {\n        if (status) {\n          return http.request(req)\n        }\n\n        return _throw(res || req)\n      }\n    );\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport {\n  Router,\n  CanActivate,\n  CanActivateChild,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PUBLIC_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ AuthGuard ] }\n *\n * @export\n *\n * @class ProtectedGuard\n *\n * @implements {CanActivate}\n * @implements {CanActivateChild}\n */\n@Injectable()\nexport class ProtectedGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE)private authService: AuthService,\n    @Inject(PUBLIC_FALLBACK_PAGE_URI) private publicFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   *\n   * @param {ActivatedRouteSnapshot} _route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService .isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (!isAuthorized && !this.isPublicPage(state)) {\n          this.navigate(this.publicFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   *\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is public fallback page\n   *\n   * @private\n   *\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {boolean}\n   */\n  private isPublicPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.publicFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   *\n   * @private\n   * @param {string} url\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport {\n  CanActivate,\n  CanActivateChild,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { map } from './rxjs.util';\n\nimport { AuthService } from './auth.service';\nimport { AUTH_SERVICE, PROTECTED_FALLBACK_PAGE_URI } from './tokens';\n\n/**\n * Guard, checks access token availability and allows or disallows access to page,\n * and redirects out\n *\n * usage: { path: 'test', component: TestComponent, canActivate: [ PublicGuard ] }\n *\n * @export\n *\n * @class PublicGuard\n *\n * @implements {CanActivate}\n * @implements {CanActivateChild}\n */\n@Injectable()\nexport class PublicGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    @Inject(AUTH_SERVICE) private authService: AuthService,\n    @Inject(PROTECTED_FALLBACK_PAGE_URI) private protectedFallbackPageUri: string,\n    private router: Router\n  ) {}\n\n  /**\n   * CanActivate handler\n   *\n   * @param {ActivatedRouteSnapshot} _route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivate(\n    _route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return map(\n      this.authService.isAuthorized(),\n      (isAuthorized: boolean) => {\n\n        if (isAuthorized && !this.isProtectedPage(state)) {\n          this.navigate(this.protectedFallbackPageUri);\n\n          return false;\n        }\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * CanActivateChild handler\n   *\n   * @param {ActivatedRouteSnapshot} route\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {Observable<boolean>}\n   */\n  public canActivateChild(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.canActivate(route, state);\n  }\n\n  /**\n   * Check, if current page is protected fallback page\n   *\n   * @private\n   *\n   * @param {RouterStateSnapshot} state\n   *\n   * @returns {boolean}\n   */\n  private isProtectedPage(state: RouterStateSnapshot): boolean {\n    return state.url === this.protectedFallbackPageUri;\n  }\n\n  /**\n   * Navigate away from the app / path\n   *\n   * @private\n   * @param {string} url\n   */\n  private navigate(url: string): void {\n    if (url.startsWith('http')) {\n      window.location.href = url;\n    } else {\n      this.router.navigateByUrl(url);\n    }\n  }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');\nexport const PUBLIC_FALLBACK_PAGE_URI = new InjectionToken('PUBLIC_FALLBACK_PAGE_URI');\nexport const PROTECTED_FALLBACK_PAGE_URI = new InjectionToken('PROTECTED_FALLBACK_PAGE_URI');\n","import { Observable } from 'rxjs/Observable';\nimport { first as _first } from 'rxjs/operator/first';\nimport { switchMap as _switchMap } from 'rxjs/operator/switchMap';\nimport { map as _map } from 'rxjs/operator/map';\nimport { _catch as __catch } from 'rxjs/operator/catch';\n\nexport function first<T>(obs: Observable<T>): Observable<T> {\n  return _first.call(obs);\n}\n\nexport function switchMap<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => Observable<R>\n): Observable<R> {\n  return _switchMap.call(obs, project);\n}\n\nexport function map<T, R>(\n  obs: Observable<T>,\n  project: (value: T, index: number) => R\n): Observable<R> {\n  return _map.call(obs, project);\n}\n\nexport function _catch<T, R>(\n  obs: Observable<T>,\n  selector: (err: any, caught: Observable<T>) => Observable<R>\n): Observable<T | R> {\n  return __catch.call(obs, selector);\n}\n\nexport { _throw } from 'rxjs/observable/throw';\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Essential service for authentication\n * @export\n * @interface AuthService\n */\nexport abstract class AuthService {\n\n  /**\n   * Check, if user already authorized.\n   *\n   * Should return Observable with true or false values\n   *\n   * @public\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract isAuthorized(): Observable<boolean>;\n\n  /**\n   * Get access token\n   *\n   * Should return access token in Observable from e.g.\n   * localStorage\n   *\n   * @public\n   *\n   * @returns {Observable<string>}\n   */\n  public abstract getAccessToken(): Observable<string>;\n\n  /**\n   * Function, that should perform refresh token verifyTokenRequest\n   *\n   * Should be successfully completed so interceptor\n   * can execute pending requests or retry original one\n   *\n   * @public\n   *\n   * @returns {Observable<*>}\n   */\n  public abstract refreshToken(): Observable<any>;\n\n  /**\n   * Function, checks response of failed request to determine,\n   * whether token be refreshed or not.\n   *\n   * Essentially checks status\n   *\n   * @public\n   *\n   * @param {HttpErrorResponse} response\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract refreshShouldHappen(response: HttpErrorResponse): boolean;\n\n  /**\n   * Verify that outgoing request is refresh-token,\n   * so interceptor won't intercept this request\n   *\n   * @public\n   *\n   * @param {string} url\n   *\n   * @returns {Observable<boolean>}\n   */\n  public abstract verifyTokenRequest(url: string): boolean;\n\n\n  /**\n   * Add token to headers, dependent on server\n   * set-up, by default adds a bearer token.\n   * Called by interceptor.\n   *\n   * To change behavior, override this method.\n   *\n   * @public\n   *\n   * @param {string} token\n   *\n   * @returns {[name: string]: string | string[]}\n   */\n  public abstract getHeaders?(token: string) : { [name: string]: string | string[] };\n}\n"],"names":["__decorate","__metadata","_throw","http","switchMap","first","map","_catch","Subject","__param","router","__catch","_map","_switchMap","_first"],"mappings":"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"}
